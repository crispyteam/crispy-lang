program            = { stmt }, EOF;

stmt               = simpleStmt | compoundStmt | flowStmt;

simpleStmt         = exprStmt | varDecl | valDecl | assignment, ";";

assignment         = ( ( expr, [ "=", expr ] ) | IDENTIFIER, ( "++" | "--" ) );

flowStmt           = breakStmt | continueStmt | returnStmt;

breakStmt          = 'break', ";";

continueStmt       = 'continue', ";";

returnStmt         = 'return', [ expr ], ";";

compoundStmt       = ifStmt | whileStmt | forStmt | block;

ifStmt             = 'if', expr, block, [ 'else', ( ifStmt | block ) ];

whileStmt          = 'while', expr, block;

forStmt            = 'for', [ simpleStmt ], ";", [ expr ], ";", [ assignment ], block;

parameters         = IDENTIFIER, { ",", IDENTIFIER };

block              = "{", stmtList, "}";

stmtList           = { stmt, ";" };

varDecl            = 'var', IDENTIFIER, [ "=", expr ], ";";

valDecl            = 'val', IDENTIFIER, "=", expr, ";";

expr               = logicOr | lambda;

lambda			   = 'fun', [ parameters ], "->", ( expr | block );

logicOr            = logicAnd, { 'or', logicAnd };

logicAnd           = equality, { 'and', equality };

equality           = comparison, { ( "==" | "!=" ), comparison };

comparison         = arithExpr, { ( "<" | "<=" | ">" | ">=" ), arithExpr };

arithExpr          = term, { ( "+" | "-" ), term };

term               = factor, { ( "*" | "/" ), factor };

factor             = ( "-" | "!" ), ( factor | primaryEpxr );

primaryEpxr		   = primary, { call };

primary            = ( literal | IDENTIFIER | "(", expr, ")" | 
                       "{", [ dictItems ], "}" | "[", [ argList ], "]" );

call               = ( "(", [argList], ")" | "[", expr, "]" | ".", IDENTIFIER );

argList            = expr, {",", expr};

dictItems		   = expr, ":", expr, { ",", dictItems };

literal            = 'true' | 'false' | 'nil' | 'self | STRING | NUMBER;

NUMBER             = DIGIT { DIGIT }, [".", { DIGIT }];

DIGIT              = ? "0" ... "9" ?;

STRING             = '"' <any char expect '"'>* '"';

IDENTIFIER         = ALPHA { ALPHA | DIGIT };

ALPHA              = ? "a" ... "z" ? | ? "A" ... "Z" ? | "_";
