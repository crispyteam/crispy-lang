program             = { stmt }, EOF;

stmt                = simpleStmt | compoundStmt | flowStmt;

simpleStmt          = exprStmt | varDecl | valDecl | assignment;

exprStmt            = expr, ";";

varDecl             = 'var', IDENTIFIER, [ "=", expr ], ";";

valDecl             = 'val', IDENTIFIER, "=", expr, ";";

compoundStmt        = whileStmt | forStmt;

flowStmt            = breakStmt | continueStmt | returnStmt;

whileStmt           = 'while', expr, loopBody;

forStmt             = 'for', [ simpleStmt ], ";", [ expr ], ";", [ assignment ], loopBody;

loopBody           = "{", stmtList, "}";

breakStmt           = 'break', ";";

continueStmt        = 'continue', ";";

returnStmt          = 'return', [ expr ], ";";

parameters          = IDENTIFIER, { ",", IDENTIFIER };

stmtList            = { stmt, ";" };

expr                = ifExpr | lambda | assignment | blockExpr;

assignment          = logicOr, ["=", expr], ";";

ifExpr              = 'if', expr, blockExpr, [ 'else', ( ifExpr | blockExpr ) ];

blockExpr           = "{", stmtList, "}";

lambda              = 'fun', [ parameters ], "->", ( expr | loopBody );

logicOr             = logicAnd, { 'or', logicAnd };

logicAnd            = equality, { 'and', equality };

equality            = comparison, { ( "==" | "!=" ), comparison };

comparison          = arithExpr, { ( "<" | "<=" | ">" | ">=" ), arithExpr };

arithExpr           = term, { ( "+" | "-" ), term };

term                = factor, { ( "*" | "/" | "%"), factor };

factor              = ['!' | '-'], primaryEpxr;

power				= primaryEpxr [ "**", factor ]

primaryEpxr         = primary, { call };

primary             = ( literal | IDENTIFIER, ['++' | '--'] | "(", expr, ")" | 
                      "{", [ dictItems ], "}" | "[", [ argList ], "]" );

call                = ( "(", [argList], ")" | "[", expr, "]" | ".", IDENTIFIER );

argList             = expr, {",", expr};

dictItems           = STRING, ":", expr, { ",", dictItems };

literal             = 'true' | 'false' | 'nil' | STRING | NUMBER;

NUMBER              = DIGIT { DIGIT }, [".", { DIGIT }];

DIGIT               = ? "0" ... "9" ?;

STRING              = '"' <any char expect '"'>* '"';

IDENTIFIER          = ALPHA { ALPHA | DIGIT };

ALPHA               = ? "a" ... "z" ? | ? "A" ... "Z" ? | "_";
